services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskmanagement-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ac130pass
      POSTGRES_DB: taskmanagement
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskmanagement-network

  # Kong Database (PostgreSQL)
  kong-database:
    image: postgres:15-alpine
    container_name: kong-postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ac130pass
      POSTGRES_DB: kong
    ports:
      - "5433:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskmanagement-network

  # Kong Migration (run once to set up Kong database)
  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ac130pass
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - taskmanagement-network
    restart: on-failure

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ac130pass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskmanagement-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ac130pass
      DB_NAME: taskmanagement
      DB_SSLMODE: disable
      AUTH_SERVICE_PORT: 8080
      JWT_SECRET: dev-jwt-secret-key
      JWT_ACCESS_TOKEN_EXPIRY: 15m
      JWT_REFRESH_TOKEN_EXPIRY: 168h
      LOG_LEVEL: debug
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskmanagement-network
    restart: unless-stopped

  # Task Service
  task-service:
    build:
      context: ./services/task-service
      dockerfile: Dockerfile
    container_name: task-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: ac130pass
      DB_NAME: taskmanagement
      DB_SSLMODE: disable
      TASK_SERVICE_PORT: 8081
      LOG_LEVEL: debug
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - taskmanagement-network
    restart: unless-stopped

  # Frontend (optional for local development)
  #  frontend:
  # build:
  #   context: ./frontend
  #   dockerfile: Dockerfile.dev
  # container_name: task-frontend
  # environment:
  #   NEXT_PUBLIC_API_URL: http://localhost:8000
  # ports:
  #   - "3000:3000"
  # volumes:
  #   - ./frontend:/app
  #   - /app/node_modules
  #   - /app/.next
  # networks:
  #   - taskmanagement-network
  # restart: unless-stopped

volumes:
  postgres_data:
  kong_data:

networks:
  taskmanagement-network:
    driver: bridge
